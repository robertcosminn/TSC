# Reading C:/Users/Cosmin/Desktop/modeltech/tcl/vsim/pref.tcl
# do run.do run_test.bat 11 0 7777 run_test1.bat
# 1
# Model Technology ModelSim Microsemi vlog 10.5c Compiler 2016.07 Jul 21 2016
# Start time: 19:46:59 on Apr 05,2023
# vlog -reportprogress 300 -sv -timescale 1ps/1ps -work work -f sources.txt 
# -- Compiling package instr_register_pkg
# -- Compiling module instr_register
# -- Importing package instr_register_pkg
# -- Compiling module instr_register_test
# -- Compiling module top
# 
# Top level modules:
# 	top
# End time: 19:46:59 on Apr 05,2023, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
# vsim -novopt -quiet -nocoverage "+notimingchecks" "+nowarnTSCALE" -sva top 
# Start time: 19:46:59 on Apr 05,2023
# //  ModelSim Microsemi 10.5c Jul 21 2016
# //
# //  Copyright 1991-2016 Mentor Graphics Corporation
# //  All Rights Reserved.
# //
# //  ModelSim Microsemi and its associated documentation contain trade
# //  secrets and commercial or financial information that are the property of
# //  Mentor Graphics Corporation and are privileged, confidential,
# //  and exempt from disclosure under the Freedom of Information Act,
# //  5 U.S.C. Section 552. Furthermore, this information
# //  is prohibited from disclosure under the Trade Secrets Act,
# //  18 U.S.C. Section 1905.
# //
# End time: 19:47:03 on Apr 05,2023, Elapsed time: 0:00:04
# Errors: 0, Warnings: 0
# vsim -novopt -quiet -nocoverage "+notimingchecks" "+nowarnTSCALE" -sva top -G/top/test/seed=7777 -G/top/test/Number_of_Transaction=11 -G/top/test/RND_CASE=0 
# Start time: 19:47:03 on Apr 05,2023
# ** Error: Error: Illegal widget path to WinfoTopFrame: 
# Executing ONERROR command at macro ./wave.do line 30
# 
# 
# ***********************************************************
# ***  THIS IS NOT A SELF-CHECKING TESTBENCH (YET).  YOU  ***
# ***  NEED TO VISUALLY VERIFY THAT THE OUTPUT VALUES     ***
# ***  MATCH THE INPUT VALUES FOR EACH REGISTER LOCATION  ***
# ***********************************************************
# 
# Reseting the instruction register...
# 
# Writing values to register stack...
# Writing to register location 1: 
#   opcode = 4 (SUB)
#   operand_a = 0
#   operand_b = 6
# 
# Writing to register location 2: 
#   opcode = 4 (SUB)
#   operand_a = 0
#   operand_b = 6
# 
# Writing to register location 3: 
#   opcode = 4 (SUB)
#   operand_a = 0
#   operand_b = 6
# 
# Writing to register location 4: 
#   opcode = 4 (SUB)
#   operand_a = 0
#   operand_b = 6
# 
# Writing to register location 5: 
#   opcode = 4 (SUB)
#   operand_a = 0
#   operand_b = 6
# 
# Writing to register location 6: 
#   opcode = 4 (SUB)
#   operand_a = 0
#   operand_b = 6
# 
# Writing to register location 7: 
#   opcode = 4 (SUB)
#   operand_a = 0
#   operand_b = 6
# 
# Writing to register location 8: 
#   opcode = 4 (SUB)
#   operand_a = 0
#   operand_b = 6
# 
# Writing to register location 9: 
#   opcode = 4 (SUB)
#   operand_a = 0
#   operand_b = 6
# 
# Writing to register location 10: 
#   opcode = 4 (SUB)
#   operand_a = 0
#   operand_b = 6
# 
# Writing to register location 11: 
#   opcode = 4 (SUB)
#   operand_a = 0
#   operand_b = 6
# 
# 
# Reading back the same register locations written...
# Read from register location 0: 
#   opcode = x ()
#   operand_a = x
#   operand_b = x
#   res = x
# Read from register location 1: 
#   opcode = 4 (SUB)
#   operand_a = 0
#   operand_b = 6
#   res = -6
# Read from register location 2: 
#   opcode = 4 (SUB)
#   operand_a = 0
#   operand_b = 6
#   res = -6
# Read from register location 3: 
#   opcode = 4 (SUB)
#   operand_a = 0
#   operand_b = 6
#   res = -6
# Read from register location 4: 
#   opcode = 4 (SUB)
#   operand_a = 0
#   operand_b = 6
#   res = -6
# Read from register location 5: 
#   opcode = 4 (SUB)
#   operand_a = 0
#   operand_b = 6
#   res = -6
# Read from register location 6: 
#   opcode = 4 (SUB)
#   operand_a = 0
#   operand_b = 6
#   res = -6
# Read from register location 7: 
#   opcode = 4 (SUB)
#   operand_a = 0
#   operand_b = 6
#   res = -6
# Read from register location 8: 
#   opcode = 4 (SUB)
#   operand_a = 0
#   operand_b = 6
#   res = -6
# Read from register location 9: 
#   opcode = 4 (SUB)
#   operand_a = 0
#   operand_b = 6
#   res = -6
# Read from register location 10: 
#   opcode = 4 (SUB)
#   operand_a = 0
#   operand_b = 6
#   res = -6
# 
# ***********************************************************
# ***  THIS IS NOT A SELF-CHECKING TESTBENCH (YET).  YOU  ***
# ***  NEED TO VISUALLY VERIFY THAT THE OUTPUT VALUES     ***
# ***  MATCH THE INPUT VALUES FOR EACH REGISTER LOCATION  ***
# ***********************************************************
# 
# ** Note: $finish    : ../lab01_testbench-interface/instr_register_test.sv(78)
#    Time: 266 ns  Iteration: 1  Instance: /top/test
# 1
# Break in Module instr_register_test at ../lab01_testbench-interface/instr_register_test.sv line 78
# Simulation Breakpoint: 1
# Break in Module instr_register_test at ../lab01_testbench-interface/instr_register_test.sv line 78
# MACRO ./run.do PAUSED at line 49
